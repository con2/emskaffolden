# Note: Let Skaffold manage the images
nodeapp_name: infotv
nodeapp_image: !Var nodeapp_name

# Whether the secret of the name !Var nodeapp_name is managed by these templates or manually created
nodeapp_secret_managed: true

# A list of "Full Name <email@example.com>", no commas
nodeapp_admins: []

nodeapp_allowed_hosts:
  - !Var ingress_public_hostname

nodeapp_smtp_server: ''
nodeapp_smtp_default_from_email: ''

# Whether or not "python manage.py migrate" should run as init container
nodeapp_setup_should_run: true
nodeapp_setup_command: ["npm", "run", "setup"]
nodeapp_extra_env: []

# NOTE: "managed" PostgreSQL should not be considered production-ready.
postgres_managed: true
postgres_image: postgres
postgres_hostname: postgres
postgres_username: !Var nodeapp_name
postgres_database: !Var nodeapp_name
postgres_storage_pvc_storageclass: !Void

# Leave empty if you want to let kubernetes-secret-generator generate one for you
postgres_password: ''

# note: managed postgres doesn't provide ssl, only enable if using external postgres
postgres_ssl: false

# Security context for nodeapp and Celery pods
# User 1000 is guaranteed to exist in the Docker image, only change if you know what you're doing
node_pod_security_context:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
node_container_security_context:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Common environment vars for both nodeapp and celery pods.
node_environment: !Concat
  - !Var nodeapp_extra_env
  -
    - name: PORT
      value: "3000"
    - name: POSTGRES_HOSTNAME
      valueFrom:
        secretKeyRef:
          name: postgres
          key: hostname
    - name: POSTGRES_DATABASE
      valueFrom:
        secretKeyRef:
          name: postgres
          key: database
    - name: POSTGRES_USERNAME
      valueFrom:
        secretKeyRef:
          name: postgres
          key: username
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres
          key: password
    - !If
        test: !Var postgres_ssl
        then:
          name: POSTGRES_EXTRAS
          value: '?sslmode=require'
    - name: SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: !Var nodeapp_name
          key: secretKey
    - name: ALLOWED_HOSTS
      value: !Join
        items: !Var nodeapp_allowed_hosts
        separator: " "
    - name: EMAIL_HOST
      value: !Var nodeapp_smtp_server
    - name: DEFAULT_FROM_EMAIL
      value: !Var nodeapp_smtp_default_from_email
    - name: ADMINS
      value: !Join
        items: !Var nodeapp_admins
        separator: ","

# Set this to the public hostname of your service.
ingress_public_hostname: !Format "{nodeapp_name}.localhost"

# If you use ingress-nginx and cert-manager, TLS can be automatically configured by setting this to true.
ingress_letsencrypt_enabled: false
ingress_letsencrypt_cluster_issuer: letsencrypt-prod

# Default annotations work for nginx ingress with or without LetsEncrypt TLS. Override if you need something else.
ingress_annotations: !If
  test: !Var ingress_letsencrypt_enabled
  then:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

ingress_tls: !If
  test: !Var ingress_letsencrypt_enabled
  then:
    - secretName: ingress-letsencrypt
      hosts:
        - !Var ingress_public_hostname
